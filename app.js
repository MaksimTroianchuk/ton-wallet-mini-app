const e = React.createElement;
const { useState, useEffect } = React;

function App() {
  const [userId, setUserId] = useState(null);
  const [wallet, setWallet] = useState(null);
  const [error, setError] = useState(null);

  useEffect(() => {
    const tg = window.Telegram?.WebApp;

    if (!tg) {
      setError('‚ùå –í—ñ–¥–∫—Ä–∏–π Mini App —á–µ—Ä–µ–∑ Telegram!');
      return;
    }

    if (!tg.initDataUnsafe?.user) {
      setError('‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π. –í—ñ–¥–∫—Ä–∏–π Mini App —á–µ—Ä–µ–∑ –±–æ—Ç–∞!');
      return;
    }

    setUserId(tg.initDataUnsafe.user.id);
    tg.ready();
    tg.expand();

    window.tonConnect = new window.TonConnect({
      manifestUrl: 'https://MaksimTroianchuk.github.io/ton-wallet-mini-app/tonconnect-manifest.json'
    });

    window.tonConnect.restoreConnection().then(() => {
      const acct = window.tonConnect.account;
      if (acct) setWallet(acct.address);
    }).catch(() => {
      // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –Ω–∞ —Ü—å–æ–º—É –µ—Ç–∞–ø—ñ
    });
  }, []);

  const handleConnect = async () => {
    try {
      const r = await window.tonConnect.connect();
      if (r?.account) setWallet(r.account.address);
    } catch {
      setError('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å.');
    }
  };

  if (error) {
    return e('div', { style: { padding: 20, fontFamily: 'Arial', color: 'red' } }, error);
  }

  return e('div', { style: { padding: 20, fontFamily: 'Arial, sans-serif' } },
    e('h2', null, 'üëõ TON Wallet Mini App'),
    e('div', null, 'Telegram ID: ', e('b', null, userId)),
    wallet
      ? e('div', { style: { marginTop: 10 } }, '–ì–∞–º–∞–Ω–µ—Ü—å: ', e('b', null, wallet))
      : e('button', {
          onClick: handleConnect,
          style: { marginTop: 20, padding: '10px 20px', fontSize: '16px' }
        }, 'üîó –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≥–∞–º–∞–Ω–µ—Ü—å')
  );
}

const dom = document.querySelector('#root');
ReactDOM.render(e(App), dom);


